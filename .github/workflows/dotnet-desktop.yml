name: Build, Package and Import SQL

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: windows-latest
    timeout-minutes: 60

    env:
      Solution_Name: TournoisPlanning.sln
      Wap_Project_Path: WapProjTM\WapProjTM.wapproj
      Sql_Script_Path: structure_tournoi.sql
      Database_Name: tournoisManagement
      Database_User: root
      Database_Password: ${{ secrets.MYSQL_TM_PASSWORD }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      with:
        vs-version: '17.8.6'

    - name: Restore NuGet packages
      run: nuget restore ${{ env.Solution_Name }}

    - name: Build Solution
      run: msbuild ${{ env.Solution_Name }} /p:Configuration=Release

    - name: Decode the PFX certificate
      if: secrets.Base64_Encoded_Pfx
      run: |
        $certBytes = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        [System.IO.File]::WriteAllBytes("GitHubActionsWorkflow.pfx", $certBytes)

    - name: Build and Package WAP project
      run: |
        msbuild ${{ env.Wap_Project_Path }} `
          /p:Configuration=Release `
          /p:UapAppxPackageBuildMode=StoreUpload `
          /p:AppxBundle=Always `
          /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx `
          /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}

    - name: Install MySQL Server
      run: |
        choco install mysql -y
        refreshenv

    - name: Start MySQL Service
      run: |
        net start mysql

    - name: Create database
      run: |
        "CREATE DATABASE IF NOT EXISTS ${{ env.Database_Name }};" | & "C:\Program Files\MySQL\MySQL Server 8.0\bin\mysql.exe" -u${{ env.Database_User }} -p${{ env.Database_Password }}

    - name: Import SQL Structure
      run: |
        & "C:\Program Files\MySQL\MySQL Server 8.0\bin\mysql.exe" -u${{ env.Database_User }} -p${{ env.Database_Password }} ${{ env.Database_Name }} < ${{ env.Sql_Script_Path }}

    - name: Upload MSIX Package and SQL Script
      uses: actions/upload-artifact@v4
      with:
        name: Build Outputs
        path: |
          WapProjTM\AppPackages
          structure_tournoi.sql
    - name: Run unit tests
      run: dotnet test TournoisPlanning.Tests/TournoisPlanning.Tests.csproj --configuration Release

